<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.web.back.mapper.StudentMapper">

    <resultMap id="BaseResultMap" type="com.web.back.domain.Student">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="name" column="name" jdbcType="VARCHAR"/>
            <result property="permission" column="permission" jdbcType="VARCHAR"/>
            <result property="account" column="account" jdbcType="VARCHAR"/>
            <result property="password" column="password" jdbcType="VARCHAR"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="gender" column="gender" jdbcType="VARCHAR"/>
            <result property="subjectId" column="subject_id" jdbcType="INTEGER"/>
            <association property="subjectClass"    column="subject_id" javaType="com.web.back.domain.SubjectClass" resultMap="SubjectClassResult" />
    </resultMap>

    <resultMap id="SubjectClassResult" type="com.web.back.domain.SubjectClass">
        <id     property="subjectId"    column="subject_id"     />
        <result property="parentId"  column="parent_id"   />
        <result property="subjectName"  column="subject_name"   />
        <result property="ancestors" column="ancestors"   />
        <result property="orderNum"  column="order_num"   />
        <result property="leader"    column="leader"      />
        <result property="status"    column="status" />
    </resultMap>
    <sql id="Webadmin_Column_List">
        select s.id,s.name,s.permission,
        s.account,s.password,s.create_time,
        s.gender,s.subject_id
        su.subject_id su.subject_name su.leader from student s
            left join subjectclass su on s.subject_id=su.subject_id
    </sql>
   <sql id="Base_Column_List">
        select s.id,s.name,s.permission,
        s.account,s.password,s.create_time,
        s.gender,s.subject_id from student
    </sql>
    <select id="studentPage" resultMap="BaseResultMap" parameterType="com.web.back.viewmodel.admin.stu.StuPageRequestVM">
        SELECT
        <include refid="Base_Column_List"/>
        FROM student
        <where>
            <if test="account != null and account != ''">
                and account like concat('%',#{account},'%')
            </if>
            <if test="role != null ">
                and role= #{role}
            </if>

        </where>
    </select>

    <select id="getStuByStuName" resultMap="BaseResultMap">
        select s.id,s.name,s.permission,
               s.account,s.password,s.create_time,
               s.gender,s.subject_id
        from student s
        where name=#{value} limit 1
    </select>

    <select id="getStuByAccount" resultMap="BaseResultMap">
        select s.id,s.name,s.permission,
               s.account,s.password,s.create_time,
               s.gender,s.subject_id
        from student s
        where account=#{value} limit 1
    </select>

    <select id="getall" resultMap="BaseResultMap">
        select s.id,s.name,s.permission,
               s.account,s.password,s.create_time,
               s.gender,s.subject_id
        from student s
    </select>

    <select id="getStuById" resultMap="BaseResultMap">
         select s.id,s.name,s.permission,
               s.account,s.password,s.create_time,
               s.gender,s.subject_id
        from student s
        where id=#{id} limit 1
    </select>

    <select id="getStuNameByStuAccount" resultType="java.lang.String">
        select name
        from student
        where account=#{stuAccount} limit 1
    </select>

    <update id="updateByPrimaryKeySelective" parameterType="com.web.back.domain.Student">
        update IGNORE  student
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="account != null">
                account = #{account,jdbcType=VARCHAR},
            </if>
            <if test="permission != null">
                permission = #{permission, jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=INTEGER},
            </if>
            <if test="role != null">
                role = #{role,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <insert id="insertSelective" parameterType="com.web.back.domain.Student" useGeneratedKeys="true" keyProperty="id">
        insert into student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null and id != 0">
                id,
            </if>
            <if test="name != null and name != ''">
                name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="account != null and account !=''">
                account,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="role != null">
                role,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="permission != null">
                permission,
            </if>
            <if test="subjectId != null">
                subject_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null and id !=''">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null and name !=''">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="account != null and account !=''">
                #{account,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=INTEGER},
            </if>
            <if test="role != null">
                #{role,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="permission != null">
                #{permission,jdbcType=VARCHAR},
            </if>
            <if test="subjectId != null">
                #{subjectId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <select id="selectStudentList" parameterType="com.web.back.domain.Student" resultMap="BaseResultMap">
        SELECT
        <include refid="Webadmin_Column_List"/>
        FROM student
        <where>
            <if test="id != null ">
                and id= #{id}
            </if>

        </where>
    </select>

    <select id="newselectStudentList" parameterType="com.web.back.domain.Student" resultMap="BaseResultMap">
        select ss.id, ss.subject_id, ss.name, ss.name, ss.permission, ss.account, ss.password, ss.create_time, ss.gender,s.subject_name, s.leader from student ss
        left join subjectclass s on ss.subject_id = s.subject_id
        <where>
        <if test="id != null and id != 0">
            AND ss.id = #{id}
        </if>
        <if test="name != null and name != ''">
            AND ss.name like concat('%', #{name}, '%')
        </if>
        <if test="account != null and account != ''">
            AND ss.account like concat('%', #{account}, '%')
        </if>
        <if test="subjectId != null and subjectId != 0">
            AND (ss.subject_id = #{subjectId} OR ss.subject_id IN ( SELECT t.subject_id FROM subjectclass t WHERE find_in_set(#{subjectId}, ancestors) ))
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
        </where>
    </select>
</mapper>
